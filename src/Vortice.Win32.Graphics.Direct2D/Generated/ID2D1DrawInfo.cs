// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Direct2D;

/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1DrawInfo"]/*' />
/// <unmanaged>ID2D1DrawInfo</unmanaged>
[Guid("693ce632-7f2f-45de-93fe-18d88b37aa21")]
[NativeTypeName("struct ID2D1DrawInfo : ID2D1RenderInfo")]
[NativeInheritance("ID2D1RenderInfo")]
public unsafe partial struct ID2D1DrawInfo : ID2D1DrawInfo.Interface, INativeGuid
{
	public static ref readonly Guid IID_ID2D1DrawInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = [
				0x32, 0xE6, 0x3C, 0x69,
				0x2F, 0x7F,
				0xDE, 0x45,
				0x93,
				0xFE,
				0x18,
				0xD8,
				0x8B,
				0x37,
				0xAA,
				0x21
			];

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID2D1DrawInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, Guid*, void**, int>)(lpVtbl[0]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, uint>)(lpVtbl[1]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, uint>)(lpVtbl[2]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID2D1RenderInfo.SetInputDescription" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetInputDescription(uint inputIndex, InputDescription inputDescription)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, uint, InputDescription, int>)(lpVtbl[3]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), inputIndex, inputDescription);
	}

	/// <inheritdoc cref="ID2D1RenderInfo.SetOutputBuffer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetOutputBuffer(BufferPrecision bufferPrecision, ChannelDepth channelDepth)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, BufferPrecision, ChannelDepth, int>)(lpVtbl[4]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), bufferPrecision, channelDepth);
	}

	/// <inheritdoc cref="ID2D1RenderInfo.SetCached" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void SetCached(Bool32 isCached)
	{
		((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, Bool32, void>)(lpVtbl[5]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), isCached);
	}

	/// <inheritdoc cref="ID2D1RenderInfo.SetInstructionCountHint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void SetInstructionCountHint(uint instructionCount)
	{
		((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, uint, void>)(lpVtbl[6]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), instructionCount);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1DrawInfo::SetPixelShaderConstantBuffer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetPixelShaderConstantBuffer(byte* buffer, uint bufferCount)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, byte*, uint, int>)(lpVtbl[7]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), buffer, bufferCount);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1DrawInfo::SetResourceTexture"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetResourceTexture(uint textureIndex, ID2D1ResourceTexture* resourceTexture)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, uint, ID2D1ResourceTexture*, int>)(lpVtbl[8]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), textureIndex, resourceTexture);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1DrawInfo::SetVertexShaderConstantBuffer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetVertexShaderConstantBuffer(byte* buffer, uint bufferCount)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, byte*, uint, int>)(lpVtbl[9]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), buffer, bufferCount);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1DrawInfo::SetPixelShader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetPixelShader(Guid* shaderId, PixelOptions pixelOptions)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, Guid*, PixelOptions, int>)(lpVtbl[10]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), shaderId, pixelOptions);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1DrawInfo::SetVertexProcessing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult SetVertexProcessing(ID2D1VertexBuffer* vertexBuffer, VertexOptions vertexOptions, BlendDescription* blendDescription, VertexRange* vertexRange, Guid* vertexShader)
	{
		return ((delegate* unmanaged[MemberFunction]<ID2D1DrawInfo*, ID2D1VertexBuffer*, VertexOptions, BlendDescription*, VertexRange*, Guid*, int>)(lpVtbl[11]))((ID2D1DrawInfo*)Unsafe.AsPointer(ref this), vertexBuffer, vertexOptions, blendDescription, vertexRange, vertexShader);
	}

	public interface Interface : ID2D1RenderInfo.Interface
	{
		[VtblIndex(7)]
		HResult SetPixelShaderConstantBuffer(byte* buffer, uint bufferCount);

		[VtblIndex(8)]
		HResult SetResourceTexture(uint textureIndex, ID2D1ResourceTexture* resourceTexture);

		[VtblIndex(9)]
		HResult SetVertexShaderConstantBuffer(byte* buffer, uint bufferCount);

		[VtblIndex(10)]
		HResult SetPixelShader(Guid* shaderId, PixelOptions pixelOptions);

		[VtblIndex(11)]
		HResult SetVertexProcessing(ID2D1VertexBuffer* vertexBuffer, VertexOptions vertexOptions, BlendDescription* blendDescription, VertexRange* vertexRange, Guid* vertexShader);
	}
}

