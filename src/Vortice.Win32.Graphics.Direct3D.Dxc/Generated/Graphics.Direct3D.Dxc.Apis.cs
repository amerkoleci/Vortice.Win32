// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Direct3D.Dxc;

public static partial class Apis
{
	public static ref readonly Guid CLSID_DxcUtils
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAF, 0xD6, 0x45, 0x62,
				0xE0, 0x66,
				0xFD, 0x48,
				0x80,
				0xB4,
				0x4D,
				0x27,
				0x17,
				0x96,
				0x74,
				0x8C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const string DXC_ARG_DEBUG = "-Zi";

	public const string DXC_ARG_SKIP_VALIDATION = "-Vd";

	public const string DXC_ARG_SKIP_OPTIMIZATIONS = "-Od";

	public const string DXC_ARG_PACK_MATRIX_ROW_MAJOR = "-Zpr";

	public const string DXC_ARG_PACK_MATRIX_COLUMN_MAJOR = "-Zpc";

	public const string DXC_ARG_AVOID_FLOW_CONTROL = "-Gfa";

	public const string DXC_ARG_PREFER_FLOW_CONTROL = "-Gfp";

	public const string DXC_ARG_ENABLE_STRICTNESS = "-Ges";

	public const string DXC_ARG_ENABLE_BACKWARDS_COMPATIBILITY = "-Gec";

	public const string DXC_ARG_IEEE_STRICTNESS = "-Gis";

	public const string DXC_ARG_OPTIMIZATION_LEVEL0 = "-O0";

	public const string DXC_ARG_OPTIMIZATION_LEVEL1 = "-O1";

	public const string DXC_ARG_OPTIMIZATION_LEVEL2 = "-O2";

	public const string DXC_ARG_OPTIMIZATION_LEVEL3 = "-O3";

	public const string DXC_ARG_WARNINGS_ARE_ERRORS = "-WX";

	public const string DXC_ARG_RESOURCES_MAY_ALIAS = "-res_may_alias";

	public const string DXC_ARG_ALL_RESOURCES_BOUND = "-all_resources_bound";

	public const string DXC_ARG_DEBUG_NAME_FOR_SOURCE = "-Zss";

	public const string DXC_ARG_DEBUG_NAME_FOR_BINARY = "-Zsb";

	public const string DXC_EXTRA_OUTPUT_NAME_STDOUT = "*stdout*";

	public const string DXC_EXTRA_OUTPUT_NAME_STDERR = "*stderr*";

	public static ref readonly Guid CLSID_DxcCompiler
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x93, 0x2D, 0xE2, 0x73,
				0xCE, 0xE6,
				0xF3, 0x47,
				0xB5,
				0xBF,
				0xF0,
				0x66,
				0x4F,
				0x39,
				0xC1,
				0xB0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcLinker
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x87, 0x80, 0x6A, 0xEF,
				0xEA, 0xB0,
				0x56, 0x4D,
				0x9E,
				0x45,
				0xD0,
				0x7E,
				0x1A,
				0x8B,
				0x78,
				0x06
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcDiaDataSource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x73, 0x6B, 0x1F, 0xCD,
				0xB0, 0x2A,
				0x4D, 0x48,
				0x8E,
				0xDC,
				0xEB,
				0xE7,
				0xA4,
				0x3C,
				0xA0,
				0x9F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcCompilerArgs
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x82, 0xAE, 0x56, 0x3E,
				0x4D, 0x22,
				0x0F, 0x47,
				0xA1,
				0xA1,
				0xFE,
				0x30,
				0x16,
				0xEE,
				0x9F,
				0x9D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcLibrary
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAF, 0xD6, 0x45, 0x62,
				0xE0, 0x66,
				0xFD, 0x48,
				0x80,
				0xB4,
				0x4D,
				0x27,
				0x17,
				0x96,
				0x74,
				0x8C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcValidator
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x15, 0xE2, 0xA3, 0x8C,
				0x28, 0xF7,
				0xF3, 0x4C,
				0x8C,
				0xDD,
				0x88,
				0xAF,
				0x91,
				0x75,
				0x87,
				0xA1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcAssembler
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x68, 0xDB, 0x28, 0xD7,
				0x03, 0xF9,
				0x80, 0x4F,
				0x94,
				0xCD,
				0xDC,
				0xCF,
				0x76,
				0xEC,
				0x71,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcContainerReflection
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x89, 0x44, 0xF5, 0xB9,
				0xB8, 0x55,
				0x0C, 0x40,
				0xBA,
				0x3A,
				0x16,
				0x75,
				0xE4,
				0x72,
				0x8B,
				0x91
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcOptimizer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9F, 0xD7, 0x2C, 0xAE,
				0x22, 0xCC,
				0x3F, 0x45,
				0x9B,
				0x6B,
				0xB1,
				0x24,
				0xE7,
				0xA5,
				0x20,
				0x4C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcContainerBuilder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x94, 0x42, 0x13, 0x94,
				0x1F, 0x41,
				0x74, 0x45,
				0xB4,
				0xD0,
				0x87,
				0x41,
				0xE2,
				0x52,
				0x40,
				0xD2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_DxcPdbUtils
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFB, 0x1D, 0x62, 0x54,
				0xCE, 0xF2,
				0x7E, 0x45,
				0xAE,
				0x8C,
				0xEC,
				0x35,
				0x5F,
				0xAE,
				0xEC,
				0x7C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const DxcCp DXC_CP_ACP = DxcCp.Acp;
	public const DxcCp DXC_CP_UTF16 = DxcCp.Utf16;
	public const DxcCp DXC_CP_UTF8 = DxcCp.Utf8;
	public const DxcOutKind DXC_OUT_NONE = DxcOutKind.None;
	public const DxcOutKind DXC_OUT_OBJECT = DxcOutKind.Object;
	public const DxcOutKind DXC_OUT_ERRORS = DxcOutKind.Errors;
	public const DxcOutKind DXC_OUT_PDB = DxcOutKind.Pdb;
	public const DxcOutKind DXC_OUT_SHADER_HASH = DxcOutKind.ShaderHash;
	public const DxcOutKind DXC_OUT_DISASSEMBLY = DxcOutKind.Disassembly;
	public const DxcOutKind DXC_OUT_HLSL = DxcOutKind.Hlsl;
	public const DxcOutKind DXC_OUT_TEXT = DxcOutKind.Text;
	public const DxcOutKind DXC_OUT_REFLECTION = DxcOutKind.Reflection;
	public const DxcOutKind DXC_OUT_ROOT_SIGNATURE = DxcOutKind.RootSignature;
	public const DxcOutKind DXC_OUT_EXTRA_OUTPUTS = DxcOutKind.ExtraOutputs;
	public const DxcHashFlags DXC_HASHFLAG_INCLUDES_SOURCE = DxcHashFlags.IncludesSource;
	public const DxcValidatorFlags DxcValidatorFlags_Default = DxcValidatorFlags.Default;
	public const DxcValidatorFlags DxcValidatorFlags_InPlaceEdit = DxcValidatorFlags.InPlaceEdit;
	public const DxcValidatorFlags DxcValidatorFlags_RootSignatureOnly = DxcValidatorFlags.RootSignatureOnly;
	public const DxcValidatorFlags DxcValidatorFlags_ModuleOnly = DxcValidatorFlags.ModuleOnly;
	public const DxcValidatorFlags DxcValidatorFlags_ValidMask = DxcValidatorFlags.ValidMask;
	public const DxcVersionInfoFlags DxcVersionInfoFlags_None = DxcVersionInfoFlags.None;
	public const DxcVersionInfoFlags DxcVersionInfoFlags_Debug = DxcVersionInfoFlags.Debug;
	public const DxcVersionInfoFlags DxcVersionInfoFlags_Internal = DxcVersionInfoFlags.Internal;
}

