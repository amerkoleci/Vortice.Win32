// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Direct3D12;

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PageableTools"]/*' />
/// <unmanaged>ID3D12PageableTools</unmanaged>
[Guid("8f1359db-d8d1-42f9-b5cf-79f4cbad0d3d")]
[NativeTypeName("struct ID3D12PageableTools : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12PageableTools : ID3D12PageableTools.Interface, INativeGuid
{
	public static ref readonly Guid IID_ID3D12PageableTools
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = [
				0xDB, 0x59, 0x13, 0x8F,
				0xD1, 0xD8,
				0xF9, 0x42,
				0xB5,
				0xCF,
				0x79,
				0xF4,
				0xCB,
				0xAD,
				0x0D,
				0x3D
			];

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12PageableTools));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12PageableTools*, Guid*, void**, int>)(lpVtbl[0]))((ID3D12PageableTools*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12PageableTools*, uint>)(lpVtbl[1]))((ID3D12PageableTools*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12PageableTools*, uint>)(lpVtbl[2]))((ID3D12PageableTools*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PageableTools::GetAllocation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetAllocation(GpuVirtualAddressRange* pAllocation)
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12PageableTools*, GpuVirtualAddressRange*, int>)(lpVtbl[3]))((ID3D12PageableTools*)Unsafe.AsPointer(ref this), pAllocation);
	}

	public interface Interface : IUnknown.Interface
	{
		[VtblIndex(3)]
		HResult GetAllocation(GpuVirtualAddressRange* pAllocation);
	}
}

