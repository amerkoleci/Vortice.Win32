// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Direct3D12;

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandQueue1"]/*' />
/// <unmanaged>ID3D12DebugCommandQueue1</unmanaged>
[Guid("16be35a2-bfd6-49f2-bcae-eaae4aff862d")]
[NativeTypeName("struct ID3D12DebugCommandQueue1 : ID3D12DebugCommandQueue")]
[NativeInheritance("ID3D12DebugCommandQueue")]
public unsafe partial struct ID3D12DebugCommandQueue1 : ID3D12DebugCommandQueue1.Interface, INativeGuid
{
	public static ref readonly Guid IID_ID3D12DebugCommandQueue1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = [
				0xA2, 0x35, 0xBE, 0x16,
				0xD6, 0xBF,
				0xF2, 0x49,
				0xBC,
				0xAE,
				0xEA,
				0xAE,
				0x4A,
				0xFF,
				0x86,
				0x2D
			];

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugCommandQueue1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12DebugCommandQueue1*, Guid*, void**, int>)(lpVtbl[0]))((ID3D12DebugCommandQueue1*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12DebugCommandQueue1*, uint>)(lpVtbl[1]))((ID3D12DebugCommandQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12DebugCommandQueue1*, uint>)(lpVtbl[2]))((ID3D12DebugCommandQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DebugCommandQueue.AssertResourceState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Bool32 AssertResourceState(ID3D12Resource* pResource, uint Subresource, uint State)
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12DebugCommandQueue1*, ID3D12Resource*, uint, uint, Bool32>)(lpVtbl[3]))((ID3D12DebugCommandQueue1*)Unsafe.AsPointer(ref this), pResource, Subresource, State);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandQueue1::AssertResourceAccess"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void AssertResourceAccess(ID3D12Resource* pResource, uint Subresource, BarrierAccess Access)
	{
		((delegate* unmanaged[MemberFunction]<ID3D12DebugCommandQueue1*, ID3D12Resource*, uint, BarrierAccess, void>)(lpVtbl[4]))((ID3D12DebugCommandQueue1*)Unsafe.AsPointer(ref this), pResource, Subresource, Access);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandQueue1::AssertTextureLayout"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void AssertTextureLayout(ID3D12Resource* pResource, uint Subresource, BarrierLayout Layout)
	{
		((delegate* unmanaged[MemberFunction]<ID3D12DebugCommandQueue1*, ID3D12Resource*, uint, BarrierLayout, void>)(lpVtbl[5]))((ID3D12DebugCommandQueue1*)Unsafe.AsPointer(ref this), pResource, Subresource, Layout);
	}

	public interface Interface : ID3D12DebugCommandQueue.Interface
	{
		[VtblIndex(4)]
		void AssertResourceAccess(ID3D12Resource* pResource, uint Subresource, BarrierAccess Access);

		[VtblIndex(5)]
		void AssertTextureLayout(ID3D12Resource* pResource, uint Subresource, BarrierLayout Layout);
	}
}

