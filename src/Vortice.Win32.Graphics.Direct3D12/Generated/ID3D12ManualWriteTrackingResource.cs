// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Direct3D12;

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ManualWriteTrackingResource"]/*' />
/// <unmanaged>ID3D12ManualWriteTrackingResource</unmanaged>
[Guid("86ca3b85-49ad-4b6e-aed5-eddb18540f41")]
[NativeTypeName("struct ID3D12ManualWriteTrackingResource : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12ManualWriteTrackingResource : ID3D12ManualWriteTrackingResource.Interface, INativeGuid
{
	public static ref readonly Guid IID_ID3D12ManualWriteTrackingResource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x85, 0x3B, 0xCA, 0x86,
				0xAD, 0x49,
				0x6E, 0x4B,
				0xAE,
				0xD5,
				0xED,
				0xDB,
				0x18,
				0x54,
				0x0F,
				0x41
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ManualWriteTrackingResource));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12ManualWriteTrackingResource*, Guid*, void**, int>)(lpVtbl[0]))((ID3D12ManualWriteTrackingResource*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12ManualWriteTrackingResource*, uint>)(lpVtbl[1]))((ID3D12ManualWriteTrackingResource*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<ID3D12ManualWriteTrackingResource*, uint>)(lpVtbl[2]))((ID3D12ManualWriteTrackingResource*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ManualWriteTrackingResource::TrackWrite"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void TrackWrite(uint Subresource, Range* pWrittenRange)
	{
		((delegate* unmanaged[MemberFunction]<ID3D12ManualWriteTrackingResource*, uint, Range*, void>)(lpVtbl[3]))((ID3D12ManualWriteTrackingResource*)Unsafe.AsPointer(ref this), Subresource, pWrittenRange);
	}

	public interface Interface : IUnknown.Interface
	{
		[VtblIndex(3)]
		void TrackWrite(uint Subresource, Range* pWrittenRange);
	}
}

