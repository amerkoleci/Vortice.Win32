// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Imaging;

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSourceTransform2"]/*' />
/// <unmanaged>IWICBitmapSourceTransform2</unmanaged>
[Guid("c3373fdf-6d39-4e5f-8e79-bf40c0b7ed77")]
[NativeTypeName("struct IWICBitmapSourceTransform2 : IWICBitmapSourceTransform")]
[NativeInheritance("IWICBitmapSourceTransform")]
public unsafe partial struct IWICBitmapSourceTransform2 : IWICBitmapSourceTransform2.Interface, INativeGuid
{
	public static ref readonly Guid IID_IWICBitmapSourceTransform2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = [
				0xDF, 0x3F, 0x37, 0xC3,
				0x39, 0x6D,
				0x5F, 0x4E,
				0x8E,
				0x79,
				0xBF,
				0x40,
				0xC0,
				0xB7,
				0xED,
				0x77
			];

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapSourceTransform2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, Guid*, void**, int>)(lpVtbl[0]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, uint>)(lpVtbl[1]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, uint>)(lpVtbl[2]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSourceTransform.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint uiWidth, uint uiHeight, Guid* pguidDstFormat, WICBitmapTransformOptions dstTransform, uint nStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, System.Drawing.Rectangle*, uint, uint, Guid*, WICBitmapTransformOptions, uint, uint, byte*, int>)(lpVtbl[3]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this), prc, uiWidth, uiHeight, pguidDstFormat, dstTransform, nStride, cbBufferSize, pbBuffer);
	}

	/// <inheritdoc cref="IWICBitmapSourceTransform.GetClosestSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetClosestSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, uint*, uint*, int>)(lpVtbl[4]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSourceTransform.GetClosestPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetClosestPixelFormat(Guid* pguidDstFormat)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, Guid*, int>)(lpVtbl[5]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this), pguidDstFormat);
	}

	/// <inheritdoc cref="IWICBitmapSourceTransform.DoesSupportTransform" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult DoesSupportTransform(WICBitmapTransformOptions dstTransform, Bool32* pfIsSupported)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, WICBitmapTransformOptions, Bool32*, int>)(lpVtbl[6]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this), dstTransform, pfIsSupported);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSourceTransform2::GetColorContextsForPixelFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetColorContextsForPixelFormat(Guid* pPixelFormat, uint cCount, IWICColorContext** ppIColorContexts, uint* pcActualCount)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICBitmapSourceTransform2*, Guid*, uint, IWICColorContext**, uint*, int>)(lpVtbl[7]))((IWICBitmapSourceTransform2*)Unsafe.AsPointer(ref this), pPixelFormat, cCount, ppIColorContexts, pcActualCount);
	}

	public interface Interface : IWICBitmapSourceTransform.Interface
	{
		[VtblIndex(7)]
		HResult GetColorContextsForPixelFormat(Guid* pPixelFormat, uint cCount, IWICColorContext** ppIColorContexts, uint* pcActualCount);
	}
}

