// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Imaging;

/// <include file='../Imaging.xml' path='doc/member[@name="IWICDisplayAdaptationControl"]/*' />
/// <unmanaged>IWICDisplayAdaptationControl</unmanaged>
[Guid("de9d91d2-70b4-4f41-836c-25fcd39626d3")]
[NativeTypeName("struct IWICDisplayAdaptationControl : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICDisplayAdaptationControl : IWICDisplayAdaptationControl.Interface, INativeGuid
{
	public static ref readonly Guid IID_IWICDisplayAdaptationControl
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = [
				0xD2, 0x91, 0x9D, 0xDE,
				0xB4, 0x70,
				0x41, 0x4F,
				0x83,
				0x6C,
				0x25,
				0xFC,
				0xD3,
				0x96,
				0x26,
				0xD3
			];

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICDisplayAdaptationControl));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICDisplayAdaptationControl*, Guid*, void**, int>)(lpVtbl[0]))((IWICDisplayAdaptationControl*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<IWICDisplayAdaptationControl*, uint>)(lpVtbl[1]))((IWICDisplayAdaptationControl*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<IWICDisplayAdaptationControl*, uint>)(lpVtbl[2]))((IWICDisplayAdaptationControl*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDisplayAdaptationControl::DoesSupportChangingMaxLuminance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult DoesSupportChangingMaxLuminance(Guid* pguidDstFormat, Bool32* pfIsSupported)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICDisplayAdaptationControl*, Guid*, Bool32*, int>)(lpVtbl[3]))((IWICDisplayAdaptationControl*)Unsafe.AsPointer(ref this), pguidDstFormat, pfIsSupported);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDisplayAdaptationControl::SetDisplayMaxLuminance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetDisplayMaxLuminance(float fLuminanceInNits)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICDisplayAdaptationControl*, float, int>)(lpVtbl[4]))((IWICDisplayAdaptationControl*)Unsafe.AsPointer(ref this), fLuminanceInNits);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDisplayAdaptationControl::GetDisplayMaxLuminance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetDisplayMaxLuminance(float* pfLuminanceInNits)
	{
		return ((delegate* unmanaged[MemberFunction]<IWICDisplayAdaptationControl*, float*, int>)(lpVtbl[5]))((IWICDisplayAdaptationControl*)Unsafe.AsPointer(ref this), pfLuminanceInNits);
	}

	public interface Interface : IUnknown.Interface
	{
		[VtblIndex(3)]
		HResult DoesSupportChangingMaxLuminance(Guid* pguidDstFormat, Bool32* pfIsSupported);

		[VtblIndex(4)]
		HResult SetDisplayMaxLuminance(float fLuminanceInNits);

		[VtblIndex(5)]
		HResult GetDisplayMaxLuminance(float* pfLuminanceInNits);
	}
}

