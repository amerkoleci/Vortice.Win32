// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.DirectComposition;

/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionAnimation"]/*' />
/// <unmanaged>IDCompositionAnimation</unmanaged>
[Guid("cbfd91d9-51b2-45e4-b3de-d19ccfb863c5")]
[NativeTypeName("struct IDCompositionAnimation : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDCompositionAnimation : IDCompositionAnimation.Interface, INativeGuid
{
	public static ref readonly Guid IID_IDCompositionAnimation
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD9, 0x91, 0xFD, 0xCB,
				0xB2, 0x51,
				0xE4, 0x45,
				0xB3,
				0xDE,
				0xD1,
				0x9C,
				0xCF,
				0xB8,
				0x63,
				0xC5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDCompositionAnimation));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, Guid*, void**, int>)(lpVtbl[0]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, uint>)(lpVtbl[1]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, uint>)(lpVtbl[2]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionAnimation::Reset"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Reset()
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, int>)(lpVtbl[3]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionAnimation::SetAbsoluteBeginTime"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetAbsoluteBeginTime(long beginTime)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, long, int>)(lpVtbl[4]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this), beginTime);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionAnimation::AddCubic"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult AddCubic(double beginOffset, float constantCoefficient, float linearCoefficient, float quadraticCoefficient, float cubicCoefficient)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, double, float, float, float, float, int>)(lpVtbl[5]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this), beginOffset, constantCoefficient, linearCoefficient, quadraticCoefficient, cubicCoefficient);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionAnimation::AddSinusoidal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult AddSinusoidal(double beginOffset, float bias, float amplitude, float frequency, float phase)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, double, float, float, float, float, int>)(lpVtbl[6]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this), beginOffset, bias, amplitude, frequency, phase);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionAnimation::AddRepeat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult AddRepeat(double beginOffset, double durationToRepeat)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, double, double, int>)(lpVtbl[7]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this), beginOffset, durationToRepeat);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionAnimation::End"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult End(double endOffset, float endValue)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionAnimation*, double, float, int>)(lpVtbl[8]))((IDCompositionAnimation*)Unsafe.AsPointer(ref this), endOffset, endValue);
	}

	public interface Interface : IUnknown.Interface
	{
		[VtblIndex(3)]
		HResult Reset();

		[VtblIndex(4)]
		HResult SetAbsoluteBeginTime(long beginTime);

		[VtblIndex(5)]
		HResult AddCubic(double beginOffset, float constantCoefficient, float linearCoefficient, float quadraticCoefficient, float cubicCoefficient);

		[VtblIndex(6)]
		HResult AddSinusoidal(double beginOffset, float bias, float amplitude, float frequency, float phase);

		[VtblIndex(7)]
		HResult AddRepeat(double beginOffset, double durationToRepeat);

		[VtblIndex(8)]
		HResult End(double endOffset, float endValue);
	}
}

