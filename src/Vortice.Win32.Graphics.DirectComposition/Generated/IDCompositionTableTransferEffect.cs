// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.DirectComposition;

/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect"]/*' />
/// <unmanaged>IDCompositionTableTransferEffect</unmanaged>
[Guid("9b7e82e2-69c5-4eb4-a5f5-a7033f5132cd")]
[NativeTypeName("struct IDCompositionTableTransferEffect : IDCompositionFilterEffect")]
[NativeInheritance("IDCompositionFilterEffect")]
public unsafe partial struct IDCompositionTableTransferEffect : IDCompositionTableTransferEffect.Interface, INativeGuid
{
	public static ref readonly Guid IID_IDCompositionTableTransferEffect
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE2, 0x82, 0x7E, 0x9B,
				0xC5, 0x69,
				0xB4, 0x4E,
				0xA5,
				0xF5,
				0xA7,
				0x03,
				0x3F,
				0x51,
				0x32,
				0xCD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDCompositionTableTransferEffect));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, Guid*, void**, int>)(lpVtbl[0]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint>)(lpVtbl[1]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint>)(lpVtbl[2]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDCompositionFilterEffect.SetInput" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetInput(uint index, IUnknown* input, uint flags)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, IUnknown*, uint, int>)(lpVtbl[3]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, input, flags);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetRedTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetRedTable(float* tableValues, uint count)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, float*, uint, int>)(lpVtbl[4]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), tableValues, count);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetGreenTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetGreenTable(float* tableValues, uint count)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, float*, uint, int>)(lpVtbl[5]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), tableValues, count);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetBlueTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetBlueTable(float* tableValues, uint count)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, float*, uint, int>)(lpVtbl[6]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), tableValues, count);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetAlphaTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetAlphaTable(float* tableValues, uint count)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, float*, uint, int>)(lpVtbl[7]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), tableValues, count);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetRedDisable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetRedDisable(Bool32 redDisable)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, Bool32, int>)(lpVtbl[8]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), redDisable);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetGreenDisable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetGreenDisable(Bool32 greenDisable)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, Bool32, int>)(lpVtbl[9]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), greenDisable);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetBlueDisable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetBlueDisable(Bool32 blueDisable)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, Bool32, int>)(lpVtbl[10]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), blueDisable);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetAlphaDisable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult SetAlphaDisable(Bool32 alphaDisable)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, Bool32, int>)(lpVtbl[11]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), alphaDisable);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetClampOutput"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetClampOutput(Bool32 clampOutput)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, Bool32, int>)(lpVtbl[12]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), clampOutput);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetRedTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult SetRedTableValue(uint index, IDCompositionAnimation* animation)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, IDCompositionAnimation*, int>)(lpVtbl[13]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, animation);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetRedTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetRedTableValue(uint index, float value)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, float, int>)(lpVtbl[14]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, value);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetGreenTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult SetGreenTableValue(uint index, IDCompositionAnimation* animation)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, IDCompositionAnimation*, int>)(lpVtbl[15]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, animation);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetGreenTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetGreenTableValue(uint index, float value)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, float, int>)(lpVtbl[16]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, value);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetBlueTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult SetBlueTableValue(uint index, IDCompositionAnimation* animation)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, IDCompositionAnimation*, int>)(lpVtbl[17]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, animation);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetBlueTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult SetBlueTableValue(uint index, float value)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, float, int>)(lpVtbl[18]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, value);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetAlphaTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult SetAlphaTableValue(uint index, IDCompositionAnimation* animation)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, IDCompositionAnimation*, int>)(lpVtbl[19]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, animation);
	}

	/// <include file='../DirectComposition.xml' path='doc/member[@name="IDCompositionTableTransferEffect::SetAlphaTableValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult SetAlphaTableValue(uint index, float value)
	{
		return ((delegate* unmanaged[MemberFunction]<IDCompositionTableTransferEffect*, uint, float, int>)(lpVtbl[20]))((IDCompositionTableTransferEffect*)Unsafe.AsPointer(ref this), index, value);
	}

	public interface Interface : IDCompositionFilterEffect.Interface
	{
		[VtblIndex(4)]
		HResult SetRedTable(float* tableValues, uint count);

		[VtblIndex(5)]
		HResult SetGreenTable(float* tableValues, uint count);

		[VtblIndex(6)]
		HResult SetBlueTable(float* tableValues, uint count);

		[VtblIndex(7)]
		HResult SetAlphaTable(float* tableValues, uint count);

		[VtblIndex(8)]
		HResult SetRedDisable(Bool32 redDisable);

		[VtblIndex(9)]
		HResult SetGreenDisable(Bool32 greenDisable);

		[VtblIndex(10)]
		HResult SetBlueDisable(Bool32 blueDisable);

		[VtblIndex(11)]
		HResult SetAlphaDisable(Bool32 alphaDisable);

		[VtblIndex(12)]
		HResult SetClampOutput(Bool32 clampOutput);

		[VtblIndex(13)]
		HResult SetRedTableValue(uint index, IDCompositionAnimation* animation);

		[VtblIndex(14)]
		HResult SetRedTableValue(uint index, float value);

		[VtblIndex(15)]
		HResult SetGreenTableValue(uint index, IDCompositionAnimation* animation);

		[VtblIndex(16)]
		HResult SetGreenTableValue(uint index, float value);

		[VtblIndex(17)]
		HResult SetBlueTableValue(uint index, IDCompositionAnimation* animation);

		[VtblIndex(18)]
		HResult SetBlueTableValue(uint index, float value);

		[VtblIndex(19)]
		HResult SetAlphaTableValue(uint index, IDCompositionAnimation* animation);

		[VtblIndex(20)]
		HResult SetAlphaTableValue(uint index, float value);
	}
}

